// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sita.proto

#ifndef PROTOBUF_sita_2eproto__INCLUDED
#define PROTOBUF_sita_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_sita_2eproto();
void protobuf_AssignDesc_sita_2eproto();
void protobuf_ShutdownFile_sita_2eproto();

class OperatorSym;
class GraphSym;

// ===================================================================

class OperatorSym : public ::google::protobuf::Message {
 public:
  OperatorSym();
  virtual ~OperatorSym();

  OperatorSym(const OperatorSym& from);

  inline OperatorSym& operator=(const OperatorSym& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OperatorSym& default_instance();

  void Swap(OperatorSym* other);

  // implements Message ----------------------------------------------

  OperatorSym* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OperatorSym& from);
  void MergeFrom(const OperatorSym& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string inputs = 1;
  inline int inputs_size() const;
  inline void clear_inputs();
  static const int kInputsFieldNumber = 1;
  inline const ::std::string& inputs(int index) const;
  inline ::std::string* mutable_inputs(int index);
  inline void set_inputs(int index, const ::std::string& value);
  inline void set_inputs(int index, const char* value);
  inline void set_inputs(int index, const char* value, size_t size);
  inline ::std::string* add_inputs();
  inline void add_inputs(const ::std::string& value);
  inline void add_inputs(const char* value);
  inline void add_inputs(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& inputs() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_inputs();

  // repeated string outputs = 2;
  inline int outputs_size() const;
  inline void clear_outputs();
  static const int kOutputsFieldNumber = 2;
  inline const ::std::string& outputs(int index) const;
  inline ::std::string* mutable_outputs(int index);
  inline void set_outputs(int index, const ::std::string& value);
  inline void set_outputs(int index, const char* value);
  inline void set_outputs(int index, const char* value, size_t size);
  inline ::std::string* add_outputs();
  inline void add_outputs(const ::std::string& value);
  inline void add_outputs(const char* value);
  inline void add_outputs(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& outputs() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_outputs();

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:OperatorSym)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> inputs_;
  ::google::protobuf::RepeatedPtrField< ::std::string> outputs_;
  ::std::string* name_;
  ::std::string* type_;
  friend void  protobuf_AddDesc_sita_2eproto();
  friend void protobuf_AssignDesc_sita_2eproto();
  friend void protobuf_ShutdownFile_sita_2eproto();

  void InitAsDefaultInstance();
  static OperatorSym* default_instance_;
};
// -------------------------------------------------------------------

class GraphSym : public ::google::protobuf::Message {
 public:
  GraphSym();
  virtual ~GraphSym();

  GraphSym(const GraphSym& from);

  inline GraphSym& operator=(const GraphSym& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GraphSym& default_instance();

  void Swap(GraphSym* other);

  // implements Message ----------------------------------------------

  GraphSym* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GraphSym& from);
  void MergeFrom(const GraphSym& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .OperatorSym op = 2;
  inline int op_size() const;
  inline void clear_op();
  static const int kOpFieldNumber = 2;
  inline const ::OperatorSym& op(int index) const;
  inline ::OperatorSym* mutable_op(int index);
  inline ::OperatorSym* add_op();
  inline const ::google::protobuf::RepeatedPtrField< ::OperatorSym >&
      op() const;
  inline ::google::protobuf::RepeatedPtrField< ::OperatorSym >*
      mutable_op();

  // @@protoc_insertion_point(class_scope:GraphSym)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::OperatorSym > op_;
  friend void  protobuf_AddDesc_sita_2eproto();
  friend void protobuf_AssignDesc_sita_2eproto();
  friend void protobuf_ShutdownFile_sita_2eproto();

  void InitAsDefaultInstance();
  static GraphSym* default_instance_;
};
// ===================================================================


// ===================================================================

// OperatorSym

// repeated string inputs = 1;
inline int OperatorSym::inputs_size() const {
  return inputs_.size();
}
inline void OperatorSym::clear_inputs() {
  inputs_.Clear();
}
inline const ::std::string& OperatorSym::inputs(int index) const {
  // @@protoc_insertion_point(field_get:OperatorSym.inputs)
  return inputs_.Get(index);
}
inline ::std::string* OperatorSym::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:OperatorSym.inputs)
  return inputs_.Mutable(index);
}
inline void OperatorSym::set_inputs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:OperatorSym.inputs)
  inputs_.Mutable(index)->assign(value);
}
inline void OperatorSym::set_inputs(int index, const char* value) {
  inputs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:OperatorSym.inputs)
}
inline void OperatorSym::set_inputs(int index, const char* value, size_t size) {
  inputs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OperatorSym.inputs)
}
inline ::std::string* OperatorSym::add_inputs() {
  return inputs_.Add();
}
inline void OperatorSym::add_inputs(const ::std::string& value) {
  inputs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:OperatorSym.inputs)
}
inline void OperatorSym::add_inputs(const char* value) {
  inputs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:OperatorSym.inputs)
}
inline void OperatorSym::add_inputs(const char* value, size_t size) {
  inputs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:OperatorSym.inputs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
OperatorSym::inputs() const {
  // @@protoc_insertion_point(field_list:OperatorSym.inputs)
  return inputs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
OperatorSym::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:OperatorSym.inputs)
  return &inputs_;
}

// repeated string outputs = 2;
inline int OperatorSym::outputs_size() const {
  return outputs_.size();
}
inline void OperatorSym::clear_outputs() {
  outputs_.Clear();
}
inline const ::std::string& OperatorSym::outputs(int index) const {
  // @@protoc_insertion_point(field_get:OperatorSym.outputs)
  return outputs_.Get(index);
}
inline ::std::string* OperatorSym::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:OperatorSym.outputs)
  return outputs_.Mutable(index);
}
inline void OperatorSym::set_outputs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:OperatorSym.outputs)
  outputs_.Mutable(index)->assign(value);
}
inline void OperatorSym::set_outputs(int index, const char* value) {
  outputs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:OperatorSym.outputs)
}
inline void OperatorSym::set_outputs(int index, const char* value, size_t size) {
  outputs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OperatorSym.outputs)
}
inline ::std::string* OperatorSym::add_outputs() {
  return outputs_.Add();
}
inline void OperatorSym::add_outputs(const ::std::string& value) {
  outputs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:OperatorSym.outputs)
}
inline void OperatorSym::add_outputs(const char* value) {
  outputs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:OperatorSym.outputs)
}
inline void OperatorSym::add_outputs(const char* value, size_t size) {
  outputs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:OperatorSym.outputs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
OperatorSym::outputs() const {
  // @@protoc_insertion_point(field_list:OperatorSym.outputs)
  return outputs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
OperatorSym::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:OperatorSym.outputs)
  return &outputs_;
}

// optional string name = 3;
inline bool OperatorSym::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OperatorSym::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OperatorSym::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OperatorSym::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& OperatorSym::name() const {
  // @@protoc_insertion_point(field_get:OperatorSym.name)
  return *name_;
}
inline void OperatorSym::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:OperatorSym.name)
}
inline void OperatorSym::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:OperatorSym.name)
}
inline void OperatorSym::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OperatorSym.name)
}
inline ::std::string* OperatorSym::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:OperatorSym.name)
  return name_;
}
inline ::std::string* OperatorSym::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OperatorSym::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:OperatorSym.name)
}

// optional string type = 4;
inline bool OperatorSym::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OperatorSym::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OperatorSym::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OperatorSym::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& OperatorSym::type() const {
  // @@protoc_insertion_point(field_get:OperatorSym.type)
  return *type_;
}
inline void OperatorSym::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:OperatorSym.type)
}
inline void OperatorSym::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:OperatorSym.type)
}
inline void OperatorSym::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OperatorSym.type)
}
inline ::std::string* OperatorSym::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:OperatorSym.type)
  return type_;
}
inline ::std::string* OperatorSym::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OperatorSym::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:OperatorSym.type)
}

// -------------------------------------------------------------------

// GraphSym

// optional string name = 1;
inline bool GraphSym::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GraphSym::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GraphSym::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GraphSym::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GraphSym::name() const {
  // @@protoc_insertion_point(field_get:GraphSym.name)
  return *name_;
}
inline void GraphSym::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:GraphSym.name)
}
inline void GraphSym::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:GraphSym.name)
}
inline void GraphSym::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GraphSym.name)
}
inline ::std::string* GraphSym::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GraphSym.name)
  return name_;
}
inline ::std::string* GraphSym::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GraphSym::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GraphSym.name)
}

// repeated .OperatorSym op = 2;
inline int GraphSym::op_size() const {
  return op_.size();
}
inline void GraphSym::clear_op() {
  op_.Clear();
}
inline const ::OperatorSym& GraphSym::op(int index) const {
  // @@protoc_insertion_point(field_get:GraphSym.op)
  return op_.Get(index);
}
inline ::OperatorSym* GraphSym::mutable_op(int index) {
  // @@protoc_insertion_point(field_mutable:GraphSym.op)
  return op_.Mutable(index);
}
inline ::OperatorSym* GraphSym::add_op() {
  // @@protoc_insertion_point(field_add:GraphSym.op)
  return op_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::OperatorSym >&
GraphSym::op() const {
  // @@protoc_insertion_point(field_list:GraphSym.op)
  return op_;
}
inline ::google::protobuf::RepeatedPtrField< ::OperatorSym >*
GraphSym::mutable_op() {
  // @@protoc_insertion_point(field_mutable_list:GraphSym.op)
  return &op_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sita_2eproto__INCLUDED
