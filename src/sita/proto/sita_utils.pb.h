// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sita_utils.proto

#ifndef PROTOBUF_sita_5futils_2eproto__INCLUDED
#define PROTOBUF_sita_5futils_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace sita {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_sita_5futils_2eproto();
void protobuf_AssignDesc_sita_5futils_2eproto();
void protobuf_ShutdownFile_sita_5futils_2eproto();

class FillerParameter;
class ParamConfig;

enum FillerParameter_VarianceNorm {
  FillerParameter_VarianceNorm_FAN_IN = 0,
  FillerParameter_VarianceNorm_FAN_OUT = 1,
  FillerParameter_VarianceNorm_AVERAGE = 2
};
bool FillerParameter_VarianceNorm_IsValid(int value);
const FillerParameter_VarianceNorm FillerParameter_VarianceNorm_VarianceNorm_MIN = FillerParameter_VarianceNorm_FAN_IN;
const FillerParameter_VarianceNorm FillerParameter_VarianceNorm_VarianceNorm_MAX = FillerParameter_VarianceNorm_AVERAGE;
const int FillerParameter_VarianceNorm_VarianceNorm_ARRAYSIZE = FillerParameter_VarianceNorm_VarianceNorm_MAX + 1;

const ::google::protobuf::EnumDescriptor* FillerParameter_VarianceNorm_descriptor();
inline const ::std::string& FillerParameter_VarianceNorm_Name(FillerParameter_VarianceNorm value) {
  return ::google::protobuf::internal::NameOfEnum(
    FillerParameter_VarianceNorm_descriptor(), value);
}
inline bool FillerParameter_VarianceNorm_Parse(
    const ::std::string& name, FillerParameter_VarianceNorm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FillerParameter_VarianceNorm>(
    FillerParameter_VarianceNorm_descriptor(), name, value);
}
// ===================================================================

class FillerParameter : public ::google::protobuf::Message {
 public:
  FillerParameter();
  virtual ~FillerParameter();

  FillerParameter(const FillerParameter& from);

  inline FillerParameter& operator=(const FillerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FillerParameter& default_instance();

  void Swap(FillerParameter* other);

  // implements Message ----------------------------------------------

  FillerParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FillerParameter& from);
  void MergeFrom(const FillerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FillerParameter_VarianceNorm VarianceNorm;
  static const VarianceNorm FAN_IN = FillerParameter_VarianceNorm_FAN_IN;
  static const VarianceNorm FAN_OUT = FillerParameter_VarianceNorm_FAN_OUT;
  static const VarianceNorm AVERAGE = FillerParameter_VarianceNorm_AVERAGE;
  static inline bool VarianceNorm_IsValid(int value) {
    return FillerParameter_VarianceNorm_IsValid(value);
  }
  static const VarianceNorm VarianceNorm_MIN =
    FillerParameter_VarianceNorm_VarianceNorm_MIN;
  static const VarianceNorm VarianceNorm_MAX =
    FillerParameter_VarianceNorm_VarianceNorm_MAX;
  static const int VarianceNorm_ARRAYSIZE =
    FillerParameter_VarianceNorm_VarianceNorm_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VarianceNorm_descriptor() {
    return FillerParameter_VarianceNorm_descriptor();
  }
  static inline const ::std::string& VarianceNorm_Name(VarianceNorm value) {
    return FillerParameter_VarianceNorm_Name(value);
  }
  static inline bool VarianceNorm_Parse(const ::std::string& name,
      VarianceNorm* value) {
    return FillerParameter_VarianceNorm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string type = 1 [default = "constant"];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional float value = 2 [default = 0];
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline float value() const;
  inline void set_value(float value);

  // optional float min = 3 [default = 0];
  inline bool has_min() const;
  inline void clear_min();
  static const int kMinFieldNumber = 3;
  inline float min() const;
  inline void set_min(float value);

  // optional float max = 4 [default = 1];
  inline bool has_max() const;
  inline void clear_max();
  static const int kMaxFieldNumber = 4;
  inline float max() const;
  inline void set_max(float value);

  // optional float mean = 5 [default = 0];
  inline bool has_mean() const;
  inline void clear_mean();
  static const int kMeanFieldNumber = 5;
  inline float mean() const;
  inline void set_mean(float value);

  // optional float std = 6 [default = 1];
  inline bool has_std() const;
  inline void clear_std();
  static const int kStdFieldNumber = 6;
  inline float std() const;
  inline void set_std(float value);

  // optional int32 sparse = 7 [default = -1];
  inline bool has_sparse() const;
  inline void clear_sparse();
  static const int kSparseFieldNumber = 7;
  inline ::google::protobuf::int32 sparse() const;
  inline void set_sparse(::google::protobuf::int32 value);

  // optional .sita.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
  inline bool has_variance_norm() const;
  inline void clear_variance_norm();
  static const int kVarianceNormFieldNumber = 8;
  inline ::sita::FillerParameter_VarianceNorm variance_norm() const;
  inline void set_variance_norm(::sita::FillerParameter_VarianceNorm value);

  // optional uint32 num_classes = 9 [default = 81];
  inline bool has_num_classes() const;
  inline void clear_num_classes();
  static const int kNumClassesFieldNumber = 9;
  inline ::google::protobuf::uint32 num_classes() const;
  inline void set_num_classes(::google::protobuf::uint32 value);

  // optional float prior_prob = 10 [default = 0.01];
  inline bool has_prior_prob() const;
  inline void clear_prior_prob();
  static const int kPriorProbFieldNumber = 10;
  inline float prior_prob() const;
  inline void set_prior_prob(float value);

  // optional bool use_softmax = 11 [default = false];
  inline bool has_use_softmax() const;
  inline void clear_use_softmax();
  static const int kUseSoftmaxFieldNumber = 11;
  inline bool use_softmax() const;
  inline void set_use_softmax(bool value);

  // @@protoc_insertion_point(class_scope:sita.FillerParameter)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_min();
  inline void clear_has_min();
  inline void set_has_max();
  inline void clear_has_max();
  inline void set_has_mean();
  inline void clear_has_mean();
  inline void set_has_std();
  inline void clear_has_std();
  inline void set_has_sparse();
  inline void clear_has_sparse();
  inline void set_has_variance_norm();
  inline void clear_has_variance_norm();
  inline void set_has_num_classes();
  inline void clear_has_num_classes();
  inline void set_has_prior_prob();
  inline void clear_has_prior_prob();
  inline void set_has_use_softmax();
  inline void clear_has_use_softmax();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_type_;
  ::std::string* type_;
  float value_;
  float min_;
  float max_;
  float mean_;
  float std_;
  ::google::protobuf::int32 sparse_;
  int variance_norm_;
  ::google::protobuf::uint32 num_classes_;
  float prior_prob_;
  bool use_softmax_;
  friend void  protobuf_AddDesc_sita_5futils_2eproto();
  friend void protobuf_AssignDesc_sita_5futils_2eproto();
  friend void protobuf_ShutdownFile_sita_5futils_2eproto();

  void InitAsDefaultInstance();
  static FillerParameter* default_instance_;
};
// -------------------------------------------------------------------

class ParamConfig : public ::google::protobuf::Message {
 public:
  ParamConfig();
  virtual ~ParamConfig();

  ParamConfig(const ParamConfig& from);

  inline ParamConfig& operator=(const ParamConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParamConfig& default_instance();

  void Swap(ParamConfig* other);

  // implements Message ----------------------------------------------

  ParamConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParamConfig& from);
  void MergeFrom(const ParamConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .sita.FillerParameter filler = 2;
  inline bool has_filler() const;
  inline void clear_filler();
  static const int kFillerFieldNumber = 2;
  inline const ::sita::FillerParameter& filler() const;
  inline ::sita::FillerParameter* mutable_filler();
  inline ::sita::FillerParameter* release_filler();
  inline void set_allocated_filler(::sita::FillerParameter* filler);

  // optional float lr_mult = 3 [default = 1];
  inline bool has_lr_mult() const;
  inline void clear_lr_mult();
  static const int kLrMultFieldNumber = 3;
  inline float lr_mult() const;
  inline void set_lr_mult(float value);

  // optional float decay_mult = 4 [default = 1];
  inline bool has_decay_mult() const;
  inline void clear_decay_mult();
  static const int kDecayMultFieldNumber = 4;
  inline float decay_mult() const;
  inline void set_decay_mult(float value);

  // @@protoc_insertion_point(class_scope:sita.ParamConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_filler();
  inline void clear_has_filler();
  inline void set_has_lr_mult();
  inline void clear_has_lr_mult();
  inline void set_has_decay_mult();
  inline void clear_has_decay_mult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::sita::FillerParameter* filler_;
  float lr_mult_;
  float decay_mult_;
  friend void  protobuf_AddDesc_sita_5futils_2eproto();
  friend void protobuf_AssignDesc_sita_5futils_2eproto();
  friend void protobuf_ShutdownFile_sita_5futils_2eproto();

  void InitAsDefaultInstance();
  static ParamConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// FillerParameter

// optional string type = 1 [default = "constant"];
inline bool FillerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FillerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FillerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FillerParameter::clear_type() {
  if (type_ != _default_type_) {
    type_->assign(*_default_type_);
  }
  clear_has_type();
}
inline const ::std::string& FillerParameter::type() const {
  // @@protoc_insertion_point(field_get:sita.FillerParameter.type)
  return *type_;
}
inline void FillerParameter::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:sita.FillerParameter.type)
}
inline void FillerParameter::set_type(const char* value) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:sita.FillerParameter.type)
}
inline void FillerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sita.FillerParameter.type)
}
inline ::std::string* FillerParameter::mutable_type() {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string(*_default_type_);
  }
  // @@protoc_insertion_point(field_mutable:sita.FillerParameter.type)
  return type_;
}
inline ::std::string* FillerParameter::release_type() {
  clear_has_type();
  if (type_ == _default_type_) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(_default_type_);
    return temp;
  }
}
inline void FillerParameter::set_allocated_type(::std::string* type) {
  if (type_ != _default_type_) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(_default_type_);
  }
  // @@protoc_insertion_point(field_set_allocated:sita.FillerParameter.type)
}

// optional float value = 2 [default = 0];
inline bool FillerParameter::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FillerParameter::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FillerParameter::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FillerParameter::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float FillerParameter::value() const {
  // @@protoc_insertion_point(field_get:sita.FillerParameter.value)
  return value_;
}
inline void FillerParameter::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:sita.FillerParameter.value)
}

// optional float min = 3 [default = 0];
inline bool FillerParameter::has_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FillerParameter::set_has_min() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FillerParameter::clear_has_min() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FillerParameter::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline float FillerParameter::min() const {
  // @@protoc_insertion_point(field_get:sita.FillerParameter.min)
  return min_;
}
inline void FillerParameter::set_min(float value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:sita.FillerParameter.min)
}

// optional float max = 4 [default = 1];
inline bool FillerParameter::has_max() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FillerParameter::set_has_max() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FillerParameter::clear_has_max() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FillerParameter::clear_max() {
  max_ = 1;
  clear_has_max();
}
inline float FillerParameter::max() const {
  // @@protoc_insertion_point(field_get:sita.FillerParameter.max)
  return max_;
}
inline void FillerParameter::set_max(float value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:sita.FillerParameter.max)
}

// optional float mean = 5 [default = 0];
inline bool FillerParameter::has_mean() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FillerParameter::set_has_mean() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FillerParameter::clear_has_mean() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FillerParameter::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
inline float FillerParameter::mean() const {
  // @@protoc_insertion_point(field_get:sita.FillerParameter.mean)
  return mean_;
}
inline void FillerParameter::set_mean(float value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:sita.FillerParameter.mean)
}

// optional float std = 6 [default = 1];
inline bool FillerParameter::has_std() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FillerParameter::set_has_std() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FillerParameter::clear_has_std() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FillerParameter::clear_std() {
  std_ = 1;
  clear_has_std();
}
inline float FillerParameter::std() const {
  // @@protoc_insertion_point(field_get:sita.FillerParameter.std)
  return std_;
}
inline void FillerParameter::set_std(float value) {
  set_has_std();
  std_ = value;
  // @@protoc_insertion_point(field_set:sita.FillerParameter.std)
}

// optional int32 sparse = 7 [default = -1];
inline bool FillerParameter::has_sparse() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FillerParameter::set_has_sparse() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FillerParameter::clear_has_sparse() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FillerParameter::clear_sparse() {
  sparse_ = -1;
  clear_has_sparse();
}
inline ::google::protobuf::int32 FillerParameter::sparse() const {
  // @@protoc_insertion_point(field_get:sita.FillerParameter.sparse)
  return sparse_;
}
inline void FillerParameter::set_sparse(::google::protobuf::int32 value) {
  set_has_sparse();
  sparse_ = value;
  // @@protoc_insertion_point(field_set:sita.FillerParameter.sparse)
}

// optional .sita.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
inline bool FillerParameter::has_variance_norm() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FillerParameter::set_has_variance_norm() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FillerParameter::clear_has_variance_norm() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FillerParameter::clear_variance_norm() {
  variance_norm_ = 0;
  clear_has_variance_norm();
}
inline ::sita::FillerParameter_VarianceNorm FillerParameter::variance_norm() const {
  // @@protoc_insertion_point(field_get:sita.FillerParameter.variance_norm)
  return static_cast< ::sita::FillerParameter_VarianceNorm >(variance_norm_);
}
inline void FillerParameter::set_variance_norm(::sita::FillerParameter_VarianceNorm value) {
  assert(::sita::FillerParameter_VarianceNorm_IsValid(value));
  set_has_variance_norm();
  variance_norm_ = value;
  // @@protoc_insertion_point(field_set:sita.FillerParameter.variance_norm)
}

// optional uint32 num_classes = 9 [default = 81];
inline bool FillerParameter::has_num_classes() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FillerParameter::set_has_num_classes() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FillerParameter::clear_has_num_classes() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FillerParameter::clear_num_classes() {
  num_classes_ = 81u;
  clear_has_num_classes();
}
inline ::google::protobuf::uint32 FillerParameter::num_classes() const {
  // @@protoc_insertion_point(field_get:sita.FillerParameter.num_classes)
  return num_classes_;
}
inline void FillerParameter::set_num_classes(::google::protobuf::uint32 value) {
  set_has_num_classes();
  num_classes_ = value;
  // @@protoc_insertion_point(field_set:sita.FillerParameter.num_classes)
}

// optional float prior_prob = 10 [default = 0.01];
inline bool FillerParameter::has_prior_prob() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FillerParameter::set_has_prior_prob() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FillerParameter::clear_has_prior_prob() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FillerParameter::clear_prior_prob() {
  prior_prob_ = 0.01f;
  clear_has_prior_prob();
}
inline float FillerParameter::prior_prob() const {
  // @@protoc_insertion_point(field_get:sita.FillerParameter.prior_prob)
  return prior_prob_;
}
inline void FillerParameter::set_prior_prob(float value) {
  set_has_prior_prob();
  prior_prob_ = value;
  // @@protoc_insertion_point(field_set:sita.FillerParameter.prior_prob)
}

// optional bool use_softmax = 11 [default = false];
inline bool FillerParameter::has_use_softmax() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FillerParameter::set_has_use_softmax() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FillerParameter::clear_has_use_softmax() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FillerParameter::clear_use_softmax() {
  use_softmax_ = false;
  clear_has_use_softmax();
}
inline bool FillerParameter::use_softmax() const {
  // @@protoc_insertion_point(field_get:sita.FillerParameter.use_softmax)
  return use_softmax_;
}
inline void FillerParameter::set_use_softmax(bool value) {
  set_has_use_softmax();
  use_softmax_ = value;
  // @@protoc_insertion_point(field_set:sita.FillerParameter.use_softmax)
}

// -------------------------------------------------------------------

// ParamConfig

// optional string name = 1;
inline bool ParamConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParamConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParamConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParamConfig::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ParamConfig::name() const {
  // @@protoc_insertion_point(field_get:sita.ParamConfig.name)
  return *name_;
}
inline void ParamConfig::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:sita.ParamConfig.name)
}
inline void ParamConfig::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:sita.ParamConfig.name)
}
inline void ParamConfig::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sita.ParamConfig.name)
}
inline ::std::string* ParamConfig::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:sita.ParamConfig.name)
  return name_;
}
inline ::std::string* ParamConfig::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ParamConfig::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:sita.ParamConfig.name)
}

// optional .sita.FillerParameter filler = 2;
inline bool ParamConfig::has_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParamConfig::set_has_filler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParamConfig::clear_has_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParamConfig::clear_filler() {
  if (filler_ != NULL) filler_->::sita::FillerParameter::Clear();
  clear_has_filler();
}
inline const ::sita::FillerParameter& ParamConfig::filler() const {
  // @@protoc_insertion_point(field_get:sita.ParamConfig.filler)
  return filler_ != NULL ? *filler_ : *default_instance_->filler_;
}
inline ::sita::FillerParameter* ParamConfig::mutable_filler() {
  set_has_filler();
  if (filler_ == NULL) filler_ = new ::sita::FillerParameter;
  // @@protoc_insertion_point(field_mutable:sita.ParamConfig.filler)
  return filler_;
}
inline ::sita::FillerParameter* ParamConfig::release_filler() {
  clear_has_filler();
  ::sita::FillerParameter* temp = filler_;
  filler_ = NULL;
  return temp;
}
inline void ParamConfig::set_allocated_filler(::sita::FillerParameter* filler) {
  delete filler_;
  filler_ = filler;
  if (filler) {
    set_has_filler();
  } else {
    clear_has_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:sita.ParamConfig.filler)
}

// optional float lr_mult = 3 [default = 1];
inline bool ParamConfig::has_lr_mult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParamConfig::set_has_lr_mult() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParamConfig::clear_has_lr_mult() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ParamConfig::clear_lr_mult() {
  lr_mult_ = 1;
  clear_has_lr_mult();
}
inline float ParamConfig::lr_mult() const {
  // @@protoc_insertion_point(field_get:sita.ParamConfig.lr_mult)
  return lr_mult_;
}
inline void ParamConfig::set_lr_mult(float value) {
  set_has_lr_mult();
  lr_mult_ = value;
  // @@protoc_insertion_point(field_set:sita.ParamConfig.lr_mult)
}

// optional float decay_mult = 4 [default = 1];
inline bool ParamConfig::has_decay_mult() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ParamConfig::set_has_decay_mult() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ParamConfig::clear_has_decay_mult() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ParamConfig::clear_decay_mult() {
  decay_mult_ = 1;
  clear_has_decay_mult();
}
inline float ParamConfig::decay_mult() const {
  // @@protoc_insertion_point(field_get:sita.ParamConfig.decay_mult)
  return decay_mult_;
}
inline void ParamConfig::set_decay_mult(float value) {
  set_has_decay_mult();
  decay_mult_ = value;
  // @@protoc_insertion_point(field_set:sita.ParamConfig.decay_mult)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sita

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sita::FillerParameter_VarianceNorm> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sita::FillerParameter_VarianceNorm>() {
  return ::sita::FillerParameter_VarianceNorm_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sita_5futils_2eproto__INCLUDED
