syntax = "proto2";
package sita;

import "sita_utils.proto";
message GraphParameter {
   optional string name = 1;
   optional string phase = 2;
   repeated OperatorParameter operatordef = 3;
 }

message  OperatorParameter {
  optional string name = 1; // the operator name
  optional string type = 2; // the operator type
  repeated string input = 3; // the name of each input
  repeated string output = 4; // the name of each output
  optional bool gradient_block = 5 [default = false];
  repeated ParamConfig param = 6; //param config

  //operators
  optional BatchNormParameter batch_norm_param = 100;
  optional ConvolutionParameter convolution_param = 101;
}


message ConvolutionParameter{
  optional uint32 num_output = 1; // The number of outputs
  optional bool bias_term = 2 [default = true]; // whether to have bias terms
  optional uint32 pad = 3 [default = 1]; // The padding size; defaults to 0
  optional uint32 kernel_size = 4 [default = 3]; // The kernel size
  optional uint32 stride = 5 [default = 1]; // The stride defaults to 1

  optional uint32 pad_h = 6; // The padding height (2D only)
  optional uint32 pad_w = 7; // The padding width (2D only)
  optional uint32 kernel_h = 8; // The kernel height (2D only)
  optional uint32 kernel_w = 9; // The kernel width (2D only)
  optional uint32 stride_h = 10; // The stride height (2D only)
  optional uint32 stride_w = 11; // The stride width (2D only)
  optional uint32 group = 12 [default = 1]; // The group size for group conv
}
message BatchNormParameter {
  // If false, accumulate global mean/variance values via a moving average. If
  // true, use those accumulated values instead of computing mean/variance
  // across the batch.
  optional bool use_global_stats = 1;
  // How much does the moving average decay each iteration?
  optional float moving_average_fraction = 2 [default = .999];
  // Small value to add to the variance estimate so that we don't divide by
  // zero.
  optional float eps = 3 [default = 1e-5];
}